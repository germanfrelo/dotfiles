{{- /* This entire script content is only for macOS (darwin). */ -}}
{{- if eq .chezmoi.os "darwin" -}}
#!/bin/bash

# ==============================================================================
# 1. SCRIPT CONFIGURATION
# ==============================================================================

# Exit immediately if a command exits with a non-zero status.
# Add -x to print commands and their arguments for debugging.
set -eufo pipefail -x # Added -x here

# Define XDG_CONFIG_HOME explicitly for this script's environment.
# This ensures it's set for the `brew bundle` commands, regardless of the shell
# environment where `chezmoi apply` was invoked or if your .zshrc hasn't loaded yet.
export XDG_CONFIG_HOME="${HOME}/.config"

# ==============================================================================
# 2. HOMEBREW INSTALLATION & UPDATE
# ==============================================================================

echo "Ensuring Homebrew is installed and configured..."

# Install Homebrew if not already installed on macOS
if ! command -v brew &> /dev/null; then
	echo "Homebrew not found. Installing Homebrew..."
	/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
	# Ensure Homebrew is in PATH for the rest of the script and future sessions.
	# On Apple Silicon Macs, Homebrew installs to /opt/homebrew
	# On Intel Macs, it usually installs to /usr/local
	eval "$(/opt/homebrew/bin/brew shellenv)" || eval "$(/usr/local/bin/brew shellenv)"
	echo "Homebrew installed and shell environment configured."
else
	echo "Homebrew is already installed."
	# Ensure Homebrew's shell environment is loaded for this script instance
	eval "$(/opt/homebrew/bin/brew shellenv)" || eval "$(/usr/local/bin/brew shellenv)"
	brew update || true # Update Homebrew to ensure it's current, ignore errors for now
fi

# ==============================================================================
# 3. BREW BUNDLE PACKAGE INSTALLATION
# ==============================================================================

# Ensure the target directory for the Brewfile exists.
# `chezmoi` handles the creation of the Brewfile itself from the template.
mkdir -p "${XDG_CONFIG_HOME}/homebrew"

# --- DEBUGGING OUTPUT START ---
echo "--- DEBUG INFO ---"
echo "XDG_CONFIG_HOME is: '${XDG_CONFIG_HOME}'"
echo "Expected Brewfile path: '${XDG_CONFIG_HOME}/homebrew/Brewfile'"
echo "Listing contents of '${XDG_CONFIG_HOME}/homebrew/':"
ls -l "${XDG_CONFIG_HOME}/homebrew/" # Check if the file exists here and its permissions
echo "--- END DEBUG INFO ---"
# --- DEBUGGING OUTPUT END ---

echo "Checking Homebrew packages for this {{ .machineType }} machine using Brew Bundle..."
# Check if all packages are installed. If not, proceed with installation.
if brew bundle check --file "${XDG_CONFIG_HOME}/homebrew/Brewfile" &> /dev/null; then
	echo "All Homebrew packages are already satisfied."
else
	echo "Missing Homebrew packages. Running brew bundle install..."
	brew bundle install --file "${XDG_CONFIG_HOME}/homebrew/Brewfile"
fi

# ==============================================================================
# 4. POST-INSTALLATION STEPS
# ==============================================================================

echo "Brew Bundle process complete."

# --- FZF Key Bindings & Auto Completion ---
# This ensures fzf's shell integrations are installed/updated after brew bundle.
echo "Setting up FZF shell extensions..."
if [ -f "$(brew --prefix)/opt/fzf/install" ]; then
	"$(brew --prefix)/opt/fzf/install" --all --no-bash --no-zsh --no-fish || true
	echo "FZF setup complete."
else
	echo "FZF install script not found. Please check Homebrew installation."
fi

# --- Additional post-install steps specific to machine type (e.g., work-related configuration) ---
{{ if eq .machineType "work" }}
echo "Running work-specific post-install scripts (if any defined)..."
# Example: If you needed to fetch a token for work-related Homebrew taps
# HOMEBREW_GITHUB_API_TOKEN='{{ onepasswordRead "op://..." }}' brew bundle ...
# Or run specific configuration commands for work software
{{- end }}

echo "Package installation script finished."

{{- end -}}
